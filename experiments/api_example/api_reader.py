import requests
import json
from datetime import datetime
import pandas as pd
from googletrans import Translator

# URL API –¥–ª—è —à—É—Ç–æ–∫
API_URL = "https://icanhazdadjoke.com/"
HEADERS = {"Accept": "application/json"}

def get_dad_jokes(num_jokes=10):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ (10) –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö dad jokes —Å API."""
    jokes = []
    for _ in range(num_jokes):
        try:
            response = requests.get(API_URL, headers=HEADERS, timeout=5)
            response.raise_for_status()
            data = response.json()
            joke = data.get("joke", "No joke found!")
            if joke not in jokes:
                jokes.append(joke)
        except (requests.exceptions.RequestException, json.JSONDecodeError) as e:
            jokes.append(f"Error fetching joke: {e}")
        if len(jokes) >= num_jokes:
            break
    return jokes

def translate_joke(joke):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —à—É—Ç–∫—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π —á–µ—Ä–µ–∑ googletrans"""
    if not joke or "Error" in joke:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à—É—Ç–∫—É."
    try:
        translator = Translator()
        translation = translator.translate(joke, src="en", dest="ru")
        return translation.text
    except Exception as e:
        return f"Fallback translation failed: {e}. Original joke: {joke}"

def save_to_dataframe(jokes, translated_jokes):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    new_rows = [
        {"Timestamp": timestamp, "Original_Joke": joke, "Translated_Joke": translated_joke}
        for joke, translated_joke in zip(jokes, translated_jokes)
    ]
    new_df = pd.DataFrame(new_rows)

    try:
        df = pd.read_parquet("jokes.parquet")
    except FileNotFoundError:
        df = pd.DataFrame(columns=["Timestamp", "Original_Joke", "Translated_Joke"])

    df = pd.concat([df, new_df], ignore_index=True)

    df.to_parquet("jokes.parquet", index=False)
    print("–®—É—Ç–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ jokes.parquet")

    with open("jokes.txt", "a", encoding="utf-8") as f:
        for joke, translated_joke in zip(jokes, translated_jokes):
            f.write(f"[{timestamp}] Original: {joke}\n")
            f.write(f"[{timestamp}] Translated (RU): {translated_joke}\n")
    print("–®—É—Ç–∫–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ jokes.txt")
    
    return df

def main():
    print("–ì–µ–Ω–µ—Ä–∏—Ä—É—é 10 –ø–∞–ø–∏–Ω—ã—Ö —à—É—Ç–æ–∫... üôâüôàüôä")
    jokes = get_dad_jokes(num_jokes=10)
    
    print("\n–®—É—Ç–∫–∏ –¥–Ω—è (–æ—Ä–∏–≥–∏–Ω–∞–ª):")
    for i, joke in enumerate(jokes, 1):
        print(f"{i}. {joke}")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —à—É—Ç–∫–∏
    translated_jokes = [translate_joke(joke) for joke in jokes]
    print("\n–®—É—Ç–∫–∏ –¥–Ω—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º):")
    for i, translated_joke in enumerate(translated_jokes, 1):
        print(f"{i}. {translated_joke}")
    print("\n")

    df = save_to_dataframe(jokes, translated_jokes)
    print("\n–¢–µ–∫—É—â–∏–π DataFrame:")
    print(df)

if __name__ == "__main__":
    main()